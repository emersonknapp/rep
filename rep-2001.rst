REP: 2001
Title: ROS Bouncy and Newer Variants
Author: Tully Foote <tfoote@openrobotics.org>, Mikael Arguedas <mikael@openrobotics.org>, Ruffin White <roxfoxpox@gmail.com>
Status: Active
Type: Informational
Content-Type: text/x-rst
Created: 16-Jul-2018
Post-History: 17-Sep-2018, 15-Mar-2019


Abstract
========

This REP describes the variants for the ROS Bouncy release and for releases that follow until otherwise replaced by a similar update REP.


Motivation
==========

For a discussion on the general motivation and role of variants,
please see REP 108 [1]_.

This document covers the common variants used for recommended
installations.
It is expressed in the ros2/variants repository on github.com [2]_.

The definitions in this REP are concise for clearer purpose, and do not list all transitive dependencies explicitly.


Specification
=============

End-user entry points
---------------------

We define these main entry points for ROS users.

 * desktop (recommended)
 * ros_base
 * ros_core
 * ros_cpp_core (advanced)

Variants
--------

ROS C++ Core
'''''''''''

The `ros_cpp_core` variant is a restricted subset of `ros_core` functionality with support for only C and C++.
It targets resource- and tool-constrained environments where package managers may be limited or unavailable.
The intention is that this variant can target cross-compiling for custom OS sysroots that may not have build tools or Python available that run on the target platform.
Build tools may use Python, this variant is not intended to restrict build tooling.
It may not contain any GUI or Python dependencies.
It may not have any dependencies outside a source workspace of its members.
Note that this variant chooses an RMW and rcl_logging implementation based on their minimal dependency footprint.

::

 - ros_cpp_core:
      # These are the packages we are actually targeting
      packages_up_to: [rclcpp, rclcpp_action, rclcpp_lifecycle, rclcpp_components]
      # This is the full package set that is actually built, and needs to meet above specified dependency criteria
      packages_all: [
            action_msgs, ament_cmake, ament_cmake_core,
            ament_cmake_export_definitions, ament_cmake_export_dependencies,
            ament_cmake_export_include_directories,
            ament_cmake_export_interfaces, ament_cmake_export_libraries,
            ament_cmake_export_link_flags, ament_cmake_gmock,
            ament_cmake_gtest, ament_cmake_include_directories,
            ament_cmake_libraries, ament_cmake_pytest, ament_cmake_python,
            ament_cmake_ros, ament_cmake_target_dependencies, ament_cmake_test,
            ament_cmake_version, ament_index_cpp, ament_index_python,
            ament_package, builtin_interfaces, class_loader,
            composition_interfaces, console_bridge_vendor, cyclonedds,
            cyclonedds_cmake_module, domain_coordinator, libyaml_vendor,
            lifecycle_msgs, poco_vendor, rcl, rcl_action, rclcpp,
            rclcpp_action, rclcpp_components, rclcpp_lifecycle,
            rcl_interfaces, rcl_lifecycle, rcl_logging_noop,
            rcl_logging_spdlog, rcl_yaml_param_parser, rcpputils, rcutils, rmw,
            rmw_cyclonedds_cpp, rmw_implementation, rmw_implementation_cmake,
            rosgraph_msgs, rosidl_adapter, rosidl_cmake,
            rosidl_default_generators, rosidl_default_runtime,
            rosidl_generator_c, rosidl_generator_cpp, rosidl_parser,
            rosidl_typesupport_c, rosidl_typesupport_cpp,
            rosidl_typesupport_interface, rosidl_typesupport_introspection_c,
            rosidl_typesupport_introspection_cpp, spdlog_vendor,
            test_interface_files, test_msgs, tinydir_vendor, tracetools,
            unique_identifier_msgs]
      # These can't be built without external dependencies and are not desired, but they end up in the source workspace and need a COLCON_IGNORE file
      packages_ignore: [rcl_logging_log4cxx]


ROS Core
''''''''

The `ros_core` variants composes the core communication protocols.
It may not contain any GUI dependencies.

::

 - ros_core:
      packages: [ament_cmake, ament_cmake_ros, ament_index, ament_lint,
                 ament_package, class_loader, common_interfaces,
                 console_bridge, googletest, launch, libyaml_vendor,
                 osrf_pycommon, osrf_testing_tools_cpp, pluginlib,
                 poco_vendor, rcl, rcl_interfaces, rclcpp, rclpy,
                 rcutils, rmw, rmw_implementation, ros2cli, rosidl,
                 rosidl_dds, rosidl_defaults, rosidl_python, rosidl_typesupport,
                 ros_environment, sros2, tinyxml2_vendor, uncrustify]
      And at least one of the following rmw_implementation:
      - Fast-RTPS: [Fast-CDR, Fast-RTPS, rmw_fastrtps]
      - Connext: [rmw_connext, rosidl_typesupport_connext]
      - Opensplice: [rmw_opensplice, rosidl_typesupport_opensplice]


ROS Base
''''''''

The `ros_base` metapackage composes the `ros_core` metapackage with
commonly used libraries.
It may not contain any GUI dependencies.

::

  - ros_base:
      extends: [ros_core]
      packages: [geometry2, kdl_parser, orocos_kinematics_dynamics,
                 robot_state_publisher, tinyxml_vendor, urdf, urdfdom,
                 urdfdom_headers]


Desktop variants
''''''''''''''''

The `desktop` metapackage is the main entry point for users.
It provides all commonly used libraries as well as visualization tools and tutorials.

::

  - desktop:
      extends: [ros_base]
      packages: [angles, demos, depthimage_to_laserscan, example_interfaces,
                 examples, joystick_drivers, laser_geometry,
                 navigation_msgs, pcl_conversions, realtime_support,
                 resource_retriever, rviz, teleop_twist_joy,
                 teleop_twist_keyboard, tlsf, vision_opencv]


Institution-specific and robot-specific
'''''''''''''''''''''''''''''''''''''''

Please see REP 108 [1]_ for discussion of institution-specific
metapackages.

When creating robot or institution specific metapackages consider
using the \*_robot and \*_desktop and \*_base form where * is the
institution or robot name.

An institution is not required to provide a metapackage, they are
mainly provided for convenience and identity.


References
==========

.. [1] REP 108: Diamondback Variants
   (http://www.ros.org/reps/rep-0108.html)

.. [2] ROS Variants Repository
   (https://github.com/ros2/variants)


Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
